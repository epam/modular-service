apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "modular-service.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "modular-service.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "modular-service.chart" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "modular-service.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "modular-service.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ include "modular-service.chart" . }}
    spec:
      restartPolicy: Always
      containers:
        - name: modular-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: '/dev/health/live'
              scheme: HTTP
              port: 8040
            initialDelaySeconds: 20
            periodSeconds: 40
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          ports:
            - containerPort: 8040
              hostPort: 8040
              protocol: TCP
          env:
            - name: modular_mongo_user
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: username
            - name: modular_mongo_password
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: password
            - name: modular_mongo_url
              value: "{{ .Values.mongoService }}:{{ .Values.mongoPort }}"
            - name: modular_mongo_db_name
              valueFrom:
                configMapKeyRef:
                  name: {{ include "modular-service.fullname" . }}
                  key: db-name
            - name: modular_service_mode
              value: docker
            - name: MODULAR_SERVICE_SYSTEM_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: modular-service-secret
                  key: system-password
            - name: MODULAR_SERVICE_VAULT_ENDPOINT
              value: "http://{{ .Values.vaultService }}:{{ .Values.vaultPort }}"
            - name: MODULAR_SERVICE_VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-secret
                  key: token
            - name: MODULAR_SERVICE_MONGO_URI
              value: "mongodb://$(modular_mongo_user):$(modular_mongo_password)@$(modular_mongo_url)/"
            - name: MODULAR_SERVICE_MONGO_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: {{ include "modular-service.fullname" . }}
                  key: db-name
            - name: VAULT_TOKEN
              value: "$(MODULAR_SERVICE_VAULT_TOKEN)"
            - name: VAULT_URL
              value: {{ .Values.vaultService }}
            - name: VAULT_SERVICE_SERVICE_PORT
              value: "{{ .Values.vaultPort }}"